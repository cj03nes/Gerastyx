contract Zeropoint {

accountSettings{

createProfile ={ 
msg.sender( username + password + emailAddress || phoneNumber ),
then return send verificationCode to msg.sender( emailAddress || phoneNumber);
vericationCode = random uint256(number);
require(msg.sender return verificationCode);
if msg.sender(verificationCode) != verificationCode then return errror,
else if msg.sender(vericationCode) == vericationCode then createProfile returns profileCreated;   }

loginToProfile ={

if msg.sender( username || emailAdress || phoneNumber ) == profileCreated, then require msg.sender(username + password);
if username || password != profileCreated then return error,
else if username && password == profileCreated then loginToProfile returns profileLoggedInto;   }

forgotPassword ={ 
require(profileCreated);
if msg.sender != loginToProfile, then return error;
if msg.sender(loginToProfile) returns 3 errors, then msg.sender(forgotPassword);
require(msg.sender[ emailAddress || phoneNumber ]);
if msg.sender[ emailAddress || phoneNumber ] != profileCreated return error, 
else if if msg.sender[ emailAddress || phoneNumber ] == profileCreated return changePassword;
changePassword = send verificationCode to msg.sender( emailAddress || phoneNumber);
vericationCode = random uint256(number);
require(msg.sender return verificationCode);
if msg.sender(verificationCode) != verificationCode then return errror,
else if msg.sender(vericationCode) == vericationCode then return changePassword;
changePassword = msg.sender( password = "string", confirmPassword = "string");
if msg.sender(password) != msg.sender(confirmPassword) then return error,
else if msg.sender(password) == msg.sender(confirmPassword) then changePassword returns passwordChanged;  }

connectCard ={
require(msg.sender == profileLoggedInto);
require(msg.sender[cardInformation ]);
cardInformation = ( cardNumber + expirationDate + CVC + nameOnFile);
cardNumber = 16 digit uint256(number);
expirationDate = 2 digit uint256(number[month]) + 2 digit uint256(number[year]);
CVC = 3 digit uint256(number);
nameOnFile = ( firstName + lastName);
if msg.sender[cardInformation ] != ( cardNumber + expirationDate + CVC + nameOnFile) then return error,
else if msg.sender[cardInformation ] == ( cardNumber + expirationDate + CVC + nameOnFile) then connectCard returns cardConnected;  }

transferFromCard ={
require(msg.sender == profileLoggedInto);
require(msg.sender == cardConnected);
msg.sender(transferFromCard) = cardConnected - uint256(amount),
if cardConnected[USDbalance] < uint256(amount) return error,
else if cardConnected[USDbalance] >= uint256(amount) then transferFromCard returns transferredFromCard;
msg.sender[USDbalance] + msg.sender(uint256(amount)[transferredFromCard]) = msg.sender[USDbalance];   }

transferToCard={
require(msg.sender == profileLoggedInto);
require(msg.sender == cardConnected);
msg.sender(transferFromCard) = cardConnected + uint256(amount),
if msg.sender[USDbalance] < uint256(amount) return error,
else if msg.sender[USDbalance] >= uint256(amount) then transferToCard returns transferredToCard;
msg.sender[USDbalance] - msg.sender(uint256(amount)[transferredToCard]) = msg.sender[USDbalance];  }



connectBank ={
require(msg.sender == profileLoggedInto);
require(msg.sender[bankInformation]);
bankInformation = (bankName + accountNumber + routingNumber + username + password);
bankName = ("string");
accountNumber = 12 digit uint256(number);
routingNumber = 9 digit uint256(number);
username = ("string");
password = ("string");
if msg.sender[bankInformation] != (bankName + accountNumber + routingNumber + username + password) then return error,
else if msg.sender[bankInformation] == (bankName + accountNumber + routingNumber + username + password) then connectBank returns bankConnected;  }

transferFromBank ={ 
require(msg.sender == profileLoggedInto);
require(msg.sender == bankConnected);
msg.sender(transferFromBank) = bankConnected - uint256(amount),
if bankConnected[USDbalance] < uint256(amount) return error,
else if bankConnected[USDbalance] >= uint256(amount) then transferFromBank returns transferredFromBank;
msg.sender[USDbalance] + msg.sender(uint256(amount)[transferredFromBank]) = msg.sender[USDbalance];   }

transferToBank ={
require(msg.sender == profileLoggedInto);
require(msg.sender == bankConnected);
msg.sender(transferFromBank) = bankConnected + uint256(amount),
if msg.sender[USDbalance] < uint256(amount) return error,
else if msg.sender[USDbalance] >= uint256(amount) then transferToBank returns transferredToBank;
msg.sender[USDbalance] - msg.sender(uint256(amount)[transferredToBank]) = msg.sender[USDbalance];  }





connectSpendCard ={
require(msg.sender == profileLoggedInto);
require(msg.sender[spendCardInformation]);
spendCardInformation = ( spendCardNumber + expirationDate + CVC + nameOnFile);
spendCardNumber = 16 digit uint256(number);
expirationDate = 2 digit uint256(number[month]) + 2 digit uint256(number[year]);
CVC = 3 digit uint256(number);
nameOnFile = ( firstName + lastName);
if msg.sender[spendCardInformation ] != ( spendCardNumber + expirationDate + CVC + nameOnFile) then return error,
else if msg.sender[spendCardInformation ] == ( spendCardNumber + expirationDate + CVC + nameOnFile) then connectSpendCard returns spendCardConnected;
require(msg.sender[createSpendCardPIN + confirmSpendCardPIN]);
createSpendCardPIN = 4 digit uint256(number);
confirmSpendCardPIN = 4 digit uint256(number);
if msg.sender(createSpendCardPIN) != msg.sender(confirmSpendCardPIN) then return error,
else if msg.sender(createSpendCardPIN) == msg.sender(confirmSpendCardPIN) then createSpendCardPIN returns spendCardPIN;  }

purchaseWithSpendCard ={
require(msg.sender == profileLoggedInto);
require(msg.sender[spendCardConnected]);
require(msg.sender[spendCardPIN]);
require msg.sender[USDbalance];
msg.sender(purchaseWithSpendCard) = msg.sender[USDbalance] - uint256(amount) + require(msg.sender[spendCardPIN]);
if msg.sender[USDbalance] < uint256(amount) then return error,
else if msg.sender[USDbalance] >= uint256(amount) then return require(msg.sender[spendCardPIN]);
if msg.sender(spendCardPIN) != msg.sender(spendCardPIN) then return error,
else if msg.sender(spendCardPIN) == msg.sender(spendCardPIN) then purchaseWithSpendCard returns purchasedWithSpendCard,
then return msg.sender[USDbalance] - uint256(amount purchasedWithSpendCard) = msg.sender[USDbalance];  }

spendCardAtm = {
require(msg.sender == profileLoggedInto);
require(msg.sender[spendCardConnected]);
require(msg.sender[spendCardPIN]);
require msg.sender[USDbalance];
msg.sender(spendCardAtm) = msg.sender[USDbalance] - uint256(amount) + require(msg.sender[spendCardPIN]);
if msg.sender[USDbalance] < uint256(amount) then return error,
else if msg.sender[USDbalance] >= uint256(amount) then return require(msg.sender[spendCardPIN]);
if msg.sender(spendCardPIN) != msg.sender(spendCardPIN) then return error,
else if msg.sender(spendCardPIN) == msg.sender(spendCardPIN) then spendCardAtm returns receivedFromAtm,
then return msg.sender[USDbalance] - uint256(amount receivedFromAtm) = msg.sender[USDbalance];  }

connectDevice ={
require(msg.sender == profileLoggedInto);
msg.sender(connectDevice) = get("modelName", " productName", "serialNumber", "IMEI", "batteryStatus", "batteryLevel", "batteryCapacity", "ipAddress", "phoneWifiMACAddress", and "phoneNumber" );
modelName = mapping(Settings < About Phone < Model Name) then return "string";
productName = mapping(Settings < About Phone < Product Name ) then return "string");
serialNumber = mapping(Settings < About Phone < Serial Number) then return uint256(number);
IMEI = mapping(Settings < About Phone < IMEI) then return uint256(number);
batteryStatus = mapping(Settings < About Phone < Battery Information < Battery Status) then return "string";
batteryLevel = mapping(Settings < About Phone < Battery Level) then return uint256(number[percent]);
batteryCapacity = mapping(Settings < About Phone < Battery Capacity) then return uint256(number);
ipAddress = mapping(Settings < About Phone < Status Information < IP Address) then return "string" && uint256(number);
phoneWifiMACAddress = mapping(Settings < About Phone < Status Information < Phone Wi-Fi MAC Address) then return "string" && uint256(number);
phoneNumber = (Settings < About Phone < Phone Number) then return uint256(number);
if msg.sender(connectDevice) != get("modelName", " productName", "serialNumber", "IMEI", "batteryStatus", "batteryLevel", "batteryCapacity", "ipAddress", "phoneWifiMACAddress", and "phoneNumber" ) then return error,
else if msg.sender(connectDevice) == get("modelName", " productName", "serialNumber", "IMEI", "batteryStatus", "batteryLevel", "batteryCapacity", "ipAddress", "phoneWifiMACAddress", and "phoneNumber" ) then return deviceConnected;

}


}







function buyZeropoint{}

function sellZeropoint{}

function consumeZeropoint {}

function transferZeropoint{}
function transferUSD{}



function get msg.sender[balances]{}

function transactionLog {}


}

